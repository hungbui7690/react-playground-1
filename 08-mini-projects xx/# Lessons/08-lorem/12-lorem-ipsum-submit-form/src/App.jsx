/*
  Lorem Ipsum - Submit Form
  - Attach an onSubmit event to the form, and create a handleSubmit function to handle the form submission. Inside the handleSubmit function, prevent the default form submission behavior using event.
  - preventDefault(). 
  - Get the count state value, and use it to create a new array by extracting the first n paragraphs from the text array (where n is the count state value). Set the text state value to the new array.
  - Hint : I will use array.slice()

  - Render Text: 
    + Render the text state value below the form. 
    + You will need to use the map method to iterate over the array and render each paragraph. 
    + Use the nanoid library to generate unique ids for each paragraph. (next lesson)

  - Array.slice()
    + array.slice is a method in JavaScript that returns a shallow copy of a portion of an array into a new array object. 
    + The slice() method takes two arguments: the starting index and the ending index of the portion of the array that you want to copy. The starting index is inclusive, meaning the element at the starting index is included in the copied portion, and the ending index is exclusive, meaning the element at the ending index is not included in the copied portion.

  - Overall, the flow of the application should look something like this:
    + In App.jsx, set up a count state value using the useState hook.
    + Set up a form element that contains a number input and a submit button.
    + Import the text array from data.js and set up a text state value using the useState hook.
    + Attach an onSubmit event to the form, and create a handleSubmit function to handle the form submission.
    + Render the text state value below the form using the map method to iterate over the array and render each paragraph with a unique id generated by the nanoid library (next)

*/

import { useState } from 'react'
import data from './data'

///////////////////////////
// slice()
///////////////////////////
const fruits = ['apple', 'banana', 'cherry', 'date', 'elderberry']
const slicedFruits = fruits.slice(1, 4) // copies elements 1, 2, and 3 (but not 4) into a new array

console.log(slicedFruits) // ['banana', 'cherry', 'date']
/*
  - In this example, the slice() method is called on the fruits array, with arguments of 1 and 4. 
  - This copies elements 1, 2, and 3 of the fruits array into a new array object, which is assigned to the slicedFruits variable. The console.log() statement then outputs the new slicedFruits array to the console.
*/

///////////////////////////
const App = () => {
  const [count, setCount] = useState(1)
  const [text, setText] = useState([])

  // (1a)
  const handleSubmit = (e) => {
    e.preventDefault()

    const amount = Number(count) // (2a)

    const newText = data.slice(0, amount) // (2b)
    setText(newText) // (2c)
  }

  return (
    <section className='section-center'>
      <h4>Tired of Boring Lorem Ipsum?</h4>

      {/* (1b) */}
      <form className='lorem-form' onSubmit={handleSubmit}>
        <label htmlFor='amount'>Paragraphs:</label>
        <input
          type='number'
          name='amount'
          id='amount'
          min={1}
          step={1}
          max={8}
          value={count}
          onChange={(e) => setCount(e.target.value)}
        />

        <button className='btn'>Generate</button>
      </form>

      {/* (3) */}
      <article className='lorem-text'>
        {text.map((item, idx) => {
          return <p key={idx}> {item} </p>
        })}
      </article>
    </section>
  )
}
export default App
